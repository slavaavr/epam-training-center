package ava.java_school.java_se_02.task1;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FileForTest {
    private Pattern patternForSentences;
    private Pattern patternForRef;
    private static final String PATTERN_FOR_SENTENCES_WITH_REF_TO_IMG = "<div>(.+[Рр]ис\\. \\d+.+)</div>";
    private static final String PATTERN_FOR_SEQUENTIAL_REF_TO_IMG = "([Рр]ис\\. \\d+)";
    private Path pathToFile = Paths.get("java-se-03/src/main/java/ava/task3/Java.SE.03.Information_handling_task_attachment.html");
    private StringBuilder sentencesWithRefToImg;
    private StringBuilder sequentialRefToImg;

    public FileForTest() {
        sentencesWithRefToImg = new StringBuilder();
        sequentialRefToImg = new StringBuilder();
        patternForSentences = Pattern.compile(PATTERN_FOR_SENTENCES_WITH_REF_TO_IMG);
        patternForRef = Pattern.compile(PATTERN_FOR_SEQUENTIAL_REF_TO_IMG);
    }

    public String getSentencesWithRefToImg() {
        return sentencesWithRefToImg.toString();
    }

    public String getSequentialRefToImg() {
        return sequentialRefToImg.toString();
    }

    public boolean isSequentialRefToImg() {
        String[] strings = sequentialRefToImg.toString().split("\n");
        String prev;
        for (int i = 1; i < strings.length; i++) {
            prev = strings[i - 1];
            if (!(prev.compareToIgnoreCase(strings[i]) < -1)) {
                return false;
            }
        }
        return true;
    }

    public void parse() {
        String line;
        try (BufferedReader br = Files.newBufferedReader(pathToFile, Charset.forName("windows-1251"))) {
            Matcher matcher;
            while ((line = br.readLine()) != null) {
                matcher = patternForSentences.matcher(line);
                if (matcher.matches()) {
                    sentencesWithRefToImg.append("->").append(matcher.group(1)).append("\n");
                    matcher = patternForRef.matcher(line);
                    while (matcher.find()) {
                        sequentialRefToImg.append(matcher.group(1)).append("\n");
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
